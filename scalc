#!/usr/bin/python3
# scalc is a script to do various slurm calculations.

import sys,os,subprocess,shlex
from math import log, ceil

# Subroutines
###############################################################
# Main handles the selection of which calculation to run.
def main():
  print("What do you want to calculate?")
  print("1) Projected FairShare Based on New RawShare")
  print("2) Additional RawShare Need for FairShare Score")
  print("3) Projected Time to Reach FairShare Score Assuming No New Jobs")
  print("4) Projected Usage and Fairshare Based on Job")
  print("5) Calculate New RawShare Based on Additional Hardware")

  option = input("Option: ")

  print(option)

  if option == '1':
    FairshareRawshare()
  elif option == '2':
    RawshareFairshare()
  elif option == '3':
    Decay()
  elif option == '4':
    JobFairshare()
  elif option == '5':
    AddHardware()

###############################################################
# FairshareRawshare calculates the projected fairshare based on a given rawshare
# and current usage of an account.
def FairshareRawshare():
  print("We will now calculate the projected fairshare score based on the current usage of the Account and RawShare you specify.")
  account = input("First we need to know what account you want to calculate for: ")
  newrawshare = input("Now we need to know the new RawShare: ")

  try:
          # sshare command we will use to get the data
    args = ['sshare', '-hP', '-A', account, '--format=RawShares,NormShares,RawUsage,NormUsage,Fairshare']
    proc = subprocess.Popen(args, stdout=subprocess.PIPE, universal_newlines=True)
  except:
    return
  else:
    for line in proc.stdout:
      (RawShares, NormShares, RawUsage, NormUsage, Fairshare) = line.strip().split('|')
      print(account, "has a current RawShare of", RawShares, "and Fairshare of", Fairshare)

      odysseyshare = float(RawShares)/float(NormShares)
      g = float(newrawshare)/odysseyshare

      f = pow(2.0,(-float(NormUsage)/g))

      print("With a new RawShare of", newrawshare, account, "would have a Fairshare of", f)

      return

#############################################################
# RawshareFairshare calculates the Rawshare required to reach a given fairshare score
# if the current usage of the account remains constant
def RawshareFairshare():
  print("We will now calculate the Rawshares required to reach a specific Fairshare based on the current usage of an Account you specify.")
  account = input("First we need to know what account you want to calculate for: ")
  newfairshare = input("Now we need to know the target Fairshare: ")

  try:
          # sshare command we will use to get the data
    args = ['sshare', '-hP', '-A', account, '--format=RawShares,NormShares,RawUsage,NormUsage,Fairshare']
    proc = subprocess.Popen(args, stdout=subprocess.PIPE, universal_newlines=True)
  except:
    return
  else:
    for line in proc.stdout:
      (RawShares, NormShares, RawUsage, NormUsage, Fairshare) = line.strip().split('|')
      print(account, "has a current RawShare of", RawShares, "and Fairshare of", Fairshare)

      newfairshare = min(float(newfairshare),0.99999)
      odysseyshare = float(RawShares)/float(NormShares)
      r = -float(NormUsage)*odysseyshare/log(float(newfairshare),2.0)

      print("For a fairshare of", newfairshare, account, "will need a RawShare of", int(ceil(r)))

      return

###########################################################
# Decay calculates how long it would take to reach a specific fairshare if the user stopped running immediately.
def Decay():
  print("We will now calculate how long it will take for the specified account to reach the specified fairshare if no new jobs are submitted.")
  account = input("First we need to know what account you want to calculate for: ")
  newfairshare = input("Now we need to know the target Fairshare: ")

  try:
          # sshare command we will use to get the data
    args = ['sshare', '-hP', '-A', account, '--format=RawShares,NormShares,RawUsage,NormUsage,Fairshare']
    proc = subprocess.Popen(args, stdout=subprocess.PIPE, universal_newlines=True)
  except:
    return
  else:
    for line in proc.stdout:
      (RawShares, NormShares, RawUsage, NormUsage, Fairshare) = line.strip().split('|')
      print(account, "has a current Normalized Usage of", NormUsage, "a Normalized Allocation of", NormShares, "and Fairshare of", Fairshare)

      newfairshare = min(float(newfairshare),0.99999)
      # thalf is the current fairshare halflife
      thalf=3.0
      t = -thalf*log(-float(NormShares)/float(NormUsage)*log(newfairshare,2.0),2.0)

      print(account, "will need", t, "days to reach a fairshare of", newfairshare, "if they submit no further jobs")

      return

#########################################################
# JobFairshare calculates the projected TRES usage for a job based on a given partition and the impact on the specified account's usage and fairshare.
def JobFairshare():
  print("We will now calculate how much TRES your jobs will cost as well as how it will impact the specified account's usage and fairshare.")
  account = input("First we need to know what account you want to calculate for: ")
  partition = input("Next we need the partition you want to submit to: ")
  cores = input("How many cores will you use per job: ")
  mem = input("How much memory in GB will you use per job: ")
  gpu = input("How many total GPUs will you user per job: ")
  timelimit = input("How long will the job run for (DD-HH:MM:SS): ")
  numjobs = input("How many jobs (or array elements) will you run of this type: ")

  try:
          # sshare command we will use to get the data
    args = ['sshare', '-hP', '-A', account, '--format=RawShares,NormShares,RawUsage,NormUsage,Fairshare']
    proc = subprocess.Popen(args, stdout=subprocess.PIPE, universal_newlines=True)
  except:
    return
  else:
    for line in proc.stdout:
      (RawShares, NormShares, RawUsage, NormUsage, Fairshare) = line.strip().split('|')
      print(account, "has a current Raw Usage of", RawUsage, "a Normalized Usage of", NormUsage, "a Normalized Allocation of", NormShares, "and Fairshare of", Fairshare)
      break

  try:
    # scontrol command to get partition data
    args = ['scontrol', '-o', 'show', 'partition', partition]
    proc = subprocess.Popen(args, stdout=subprocess.PIPE, universal_newlines=True)
  except:
    return
  else:
    # Cycle through each line
    for line in proc.stdout:
      # Turn partition information into a hash
      part = dict(s.split("=", 1) for s in shlex.split(line) if '=' in s)

      # Extract the TRES weights
      tresweights = part['TRESBillingWeights']

      if tresweights.count(',') == 1:

        (cpuweight, memweight) = tresweights.strip().split(',')

        (temp, cpuweight) = cpuweight.strip().split('=')
        (temp, memweight) = memweight.strip().split('=')
        gpuweight = 0

      elif tresweights.count(',') == 2:

        (cpuweight, memweight, gpuweight) = tresweights.strip().split(',')

        (temp, cpuweight) = cpuweight.strip().split('=')
        (temp, memweight) = memweight.strip().split('=')
        (temp, gpuweight) = gpuweight.strip().split('=')

      memweight = memweight.strip('G')

  print("This partition has a TRES charge per second of CPU:", cpuweight, "| Mem (per GB):", memweight, "| GPU (per GPU):", gpuweight)

  # Convert time to seconds
  (days, tempt) = timelimit.split('-')
  (hours, mins, secs) = tempt.split(':')
  t = 86400.0*float(days)+3600.0*float(hours)+60.0*float(mins)+float(secs)

  trestot = t*(float(cpuweight)*float(cores)+float(memweight)*float(mem)+float(gpuweight)*float(gpu))*float(numjobs)
  print("This set of jobs has a total TRES usage of:", trestot)

  odysseyusage = max(float(RawUsage),1)/max(float(NormUsage),0.000001)
  newnormusage = (float(RawUsage)+trestot)/(odysseyusage+trestot)
  newfairshare = pow(2.0,-newnormusage/float(NormShares))

  print("For", account, "this will give a new Normalized Usage of", newnormusage, "and a Fairshare of", newfairshare)

#########################################################
# AddHardware calculates the new RawShares for a Lab depending on the Hardware indicated.
def AddHardware():
  print("We will now calculate the new RawShare for a specified account based on the additional hardware specified. Available hardware types are Intel Sapphire Rapids cores and Nvidia H100 GPUs")
  account = input("First we need to know what account you want to calculate for: ")
  sapphirerapids = input("How many Intel Sapphire Rapids cores (TRES Weight = 0.6) do you want to add: ")
  h100 = input("How many Nvidia H100 GPUs (TRES Weight = 546.9) do you want to add: ")

  # TRES Weights
  sapphirerapidstres = 0.6
  h100tres = 546.9

  try:
          # sshare command we will use to get the data
    args = ['sshare', '-hP', '-A', account, '--format=RawShares,NormShares,RawUsage,NormUsage,Fairshare']
    proc = subprocess.Popen(args, stdout=subprocess.PIPE, universal_newlines=True)
  except:
    return
  else:
    for line in proc.stdout:
      (RawShares, NormShares, RawUsage, NormUsage, Fairshare) = line.strip().split('|')
      break

  newrawshares = sapphirerapidstres*float(sapphirerapids)+h100tres*float(h100)

  print ("Account", account, "has current RawShares of", RawShares)
  print ("The additional hardware would add", int(newrawshares), "RawShares for a total of", int(newrawshares+float(RawShares)))

#########################################################
# Actually start program
main()
